<template>
  <form @submit.prevent="search">
    <label>Search items</label>
    <input v-model="searchString" />
    <button @click.prevent="search">search</button>
    <button @click.prevent="clearText">clear</button>
  </form>
  <div v-if="resultsNumber > 0">Search results count: {{ resultsNumber }}</div>

  <div>
    results per page:
    <select
      id="results-per-page"
      v-model="resultsPerPage"
      @change="onResultsPerPageChange"
    >
      <option v-for="(item, index) in pageResultOptions" :key="index">{{
        item
      }}</option>
    </select>
  </div>

  <div>
    <ul>
      <li
        v-for="(item, index) in items"
        :key="`${item.Food_Code}-${item.Display_Name}-${index}`"
      >
        {{ item.Display_Name }} : {{ item.Portion_Display_Name }} of
        {{ item.Portion_Amount }}, {{ item.Calories }} calories
      </li>
    </ul>
  </div>
</template>

<script>
import FoodDisplayTable from "./dummy_data/food_display_table.json";
import wildcard from "wildcard";
var testdata = ["a.b.c", "a.b", "a", "a.b.d"];

console.log("test", wildcard("a.b.*", testdata));

/*

page number in state to store page number to display 
computed - to return results based on the page number
 - if page number = 1 then we return 25 results
 - if page number = 2 then we return 50 results

In search results
- store all the results found in the items array
- reset page number to 1

Add show more items button
- This button will increment page number
- This button should be hidden if the computed has the same length as items

*/

/*

- Convert searchString to an array and rename it to searchQueries
- Use v-for directive to loop through searchQueries array to generate input fields
- Add down icon to add a new input field. It should just add an empty string to the searchQueries array
- Use v-model to bind each input with the searchQueries array like so: v-model="searchQueries[index]"
- Update the search to loop through searchQueries while comparing items

*/

/*

- Add a new property to the state to hold currently selected results limit. By default, it should be 25
- Add a new select field to allow a user to specify, how many results does the user want to see.
- The select element should have these 5 options: 10, 25, 50, 75, 100. You can use the v-for directive to loop through an array of options to generate <option> elements for the select field. The options array can be added to the Vue instance in the created hook, or returned from the setup method
- Update the search method to utilise the results limit value

*/

export default {
  name: "App",
  data() {
    return {
      resultsPerPage: 10,
      searchString: "",
      resultsNumber: 0,
      items: [],
    };
  },
  methods: {
    onResultsPerPageChange(e) {
      console.log("on results change", e);
      this.search();
    },
    async search() {
      console.log({ searchString: this.searchString });
      if (!this.searchString.length) {
        alert("Please enter search query.");
        return;
      }
      const query = this.searchString.toLowerCase();

      let results = this.ingredients.filter((item) => {
        const { Display_Name } = item;

        const itemString = Display_Name.toLowerCase();
        return (
          itemString.includes(query) ||
          (query.includes("*") && wildcard(query, [itemString])?.[0])
        );
      });

      if (!results.length) {
        this.items = [];
        alert("no matching results");
        return;
      }
      // if (results.length > 25) {
      // }
      this.resultsNumber = results.length;
      this.items = results.slice(0, parseInt(this.resultsPerPage));
      // this.items = results;
      console.log("Results", this.items, results);
    },
    clearText() {
      this.searchString = "";
      this.items = [];
    },
  },
  created() {
    this.ingredients = FoodDisplayTable.Food_Display_Table.Food_Display_Row;
    console.log(this.ingredients);

    this.pageResultOptions = [10, 25, 50, 75, 100];
  },
};
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}
</style>
